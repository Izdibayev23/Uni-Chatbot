from flask import Flask, request, jsonify, render_template
from transformers import BartTokenizer, BartForConditionalGeneration
from flask_cors import CORS
import logging
import re
import json
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Configure logging
logging.basicConfig(level=logging.INFO)

# Load the fine-tuned model and tokenizer
model_name = "fine_tuned_bart"
tokenizer = BartTokenizer.from_pretrained(model_name)
model = BartForConditionalGeneration.from_pretrained(model_name)

# Predefined responses
predefined_responses = {
    "greeting": "Hello! Good to see you, I am a THWS bot assistant, feel free to ask me questions about the university!",
    "no_opinion": "I am just a chatbot and I don't have feelings or personal opinions.",
    "no_answer": "Unfortunately, I don't have the answer to that question. For additional questions, please contact HSST.",
    "thanks": "You're welcome! Feel free to ask if you have any more questions.",
    "who_are_you": "I am a THWS chatbot assistant, how can I help you?",
    "creators": "My creators are two enthusiastic students from Kazakhstan: Islam Izdibayev and Arsen Sartayev. They have spent countless hours creating and setting me up, so don't forget to say good job next time you see them!"
}

# File to store unanswered questions
unanswered_file = 'unanswered_questions.json'

def preprocess_text(text):
    # Normalize and clean the input text
    text = text.lower().strip()
    text = re.sub(r"[^a-zA-Z0-9\s.,!?()-]", "", text)
    return text

def is_gibberish(text):
    # Simple check for gibberish input
    return len(set(text)) < 5  # If less than 5 unique characters, consider it gibberish

def generate_answer(question):
    input_text = f"question: {preprocess_text(question)}"
    inputs = tokenizer(input_text, return_tensors='pt')

    outputs = model.generate(
        inputs['input_ids'],
        max_length=150,
        num_beams=5,  # Beam search for better quality responses
        no_repeat_ngram_size=2,
        top_p=0.95,
        temperature=0.7
    )

    answer = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return answer

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    data = request.get_json()
    question = data.get('question', '').strip().lower()
    
    if not question or len(question) < 5:  # Ensure at least 5 characters
        return jsonify({'error': 'Question is too short'}), 400

    logging.info(f"Received question: {question}")

    # Handle predefined responses
    if any(greeting in question for greeting in ['hello', 'hi']):
        answer = predefined_responses["greeting"]
    elif 'opinion' in question:
        answer = predefined_responses["no_opinion"]
    elif 'thanks' in question or 'thank you' in question:
        answer = predefined_responses["thanks"]
    elif is_gibberish(question):
        answer = predefined_responses["no_answer"]
        return jsonify({
            'answer': answer,
            'prompt': 'Do you want to share the data with us? The data will help us for additional chatbot improvements.',
            'options': ['accept', 'decline']
        })
    else:
        answer = generate_answer(question)
        # Check for no meaningful answer
        if not answer or len(answer.split()) < 5:  # Avoid short/meaningless responses
            answer = predefined_responses["no_answer"]
            return jsonify({
                'answer': answer,
                'prompt': 'Do you want to share the data with us? The data will help us for additional chatbot improvements.',
                'options': ['accept', 'decline']
            })
    
    logging.info(f"Generated answer: {answer}")
    return jsonify({'answer': answer})

@app.route('/feedback', methods=['POST'])
def feedback():
    data = request.get_json()
    question = data.get('question', '').strip().lower()
    feedback = data.get('feedback', '')

    if feedback == 'accept':
        unanswered_questions = []
        if os.path.exists(unanswered_file):
            with open(unanswered_file, 'r') as file:
                unanswered_questions = json.load(file)
        
        unanswered_questions.append(question)

        with open(unanswered_file, 'w') as file:
            json.dump(unanswered_questions, file, indent=4)

        logging.info(f"Saved unanswered question: {question}")

    return jsonify({'message': 'Feedback recorded. Thank you!'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
